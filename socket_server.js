// Generated by CoffeeScript 1.4.0

/*
@file socket_server.coffee

@brief Our socket server implementation.
@author Kenneth Murphy (kmmurphy)
@author Lucas Ray (ltray)
*/


(function() {
  var SocketServer;

  SocketServer = (function() {

    function SocketServer(port) {
      this.port = port;
      /*
          @brief Constructor for this socket server.
      
          @param port The port we're listening on.
      */

      return;
    }

    SocketServer.prototype.listen = function() {
      /*
          @brief Starts this server listening.
      */

      var http, io;
      io = require('socket.io').listen(this.port);
      http = require('http');
      return io.sockets.on('connection', (function(socket) {
        socket.on('simpleSearch', (function(data) {
          var options, processZillowData;
          console.log("beginning simple search");
          options = {
            host: 'www.zillow.com',
            path: data.path,
            method: 'GET'
          };
          processZillowData = (function(res) {
            var zillowXML;
            zillowXML = '';
            res.on('data', (function(zillowData) {
              return zillowXML += zillowData;
            }));
            res.on('end', (function() {
              return socket.emit('searchResults', {
                'zillowData': zillowXML
              });
            }));
            return res.on('error', (function(err) {
              return console.log(err);
            }));
          });
          return (http.request(options, processZillowData)).end();
        }));
        socket.on('compSearch', (function(data) {
          var options, processZillowData;
          console.log("beginning comp search");
          options = {
            host: 'www.zillow.com',
            path: data.path,
            method: 'GET'
          };
          processZillowData = (function(res) {
            var zillowXML;
            zillowXML = '';
            res.on('data', (function(zillowData) {
              return zillowXML += zillowData;
            }));
            res.on('end', (function() {
              return socket.emit('compResults', {
                'zillowData': zillowXML
              });
            }));
            return res.on('error', (function(err) {
              return console.log(err);
            }));
          });
          return (http.request(options, processZillowData)).end();
        }));
        return socket.on('scoreRequest', (function(data) {
          /*
                  @brief handles a request for a greenscore
                  @param data packet sent to the server
                  Expects sqft, num_beds, num_baths, solar
          */

          var args, options, processScoreRequest;
          console.log("got a greenscore request");
          console.log(data.num_beds);
          console.log(data.num_baths);
          console.log(data.sqft);
          if (data.num_beds === void 0) {
            data.num_beds = 0;
          }
          if (data.num_baths === void 0) {
            data.num_baths = 0;
          }
          if (data.sqft === void 0) {
            data.sqft = 0;
          }
          args = "?sqft=" + Math.floor(data.sqft) + "&num_beds=" + Math.floor(data.num_beds) + "&num_baths=" + Math.floor(data.num_baths);
          options = {
            host: 'localhost',
            path: '/json/getGreenscore' + args,
            port: 8080,
            method: 'GET'
          };
          console.log(options.path);
          processScoreRequest = (function(res) {
            var totalData;
            console.log('processing score request!');
            totalData = '';
            res.on('data', (function(newData) {
              return totalData += newData;
            }));
            res.on('end', (function() {
              return socket.emit('scoreResults', {
                'greenscore': totalData
              });
            }));
            return res.on('error', (function(err) {
              return console.log(err);
            }));
          });
          return (http.request(options, processScoreRequest)).end();
        }));
      }));
    };

    return SocketServer;

  })();

  module.exports = SocketServer;

}).call(this);
