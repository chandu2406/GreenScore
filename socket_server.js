// Generated by CoffeeScript 1.4.0

/*
@file socket_server.coffee

@brief Our socket server implementation.
@author Kenneth Murphy (kmmurphy)
@author Lucas Ray (ltray)
@author Nick LaGrow (nlagrow)
*/


(function() {
  var SocketServer;

  SocketServer = (function() {

    function SocketServer(port) {
      this.port = port;
      /*
          @brief Constructor for this socket server.
      
          @param port The port we're listening on.
      */

      return;
    }

    SocketServer.prototype.listen = function() {
      /*
          @brief Starts this server listening.
      */

      var http, io;
      io = require('socket.io').listen(this.port);
      http = require("http");
      return io.sockets.on('connection', (function(socket) {
        socket.on('simpleSearch', (function(data) {
          var options, processZillowData;
          console.log("beginning simple search");
          options = {
            host: 'www.zillow.com',
            path: data.path,
            method: 'GET'
          };
          processZillowData = (function(res) {
            var zillowXML;
            zillowXML = '';
            res.on('data', (function(zillowData) {
              return zillowXML += zillowData;
            }));
            res.on('end', (function() {
              return socket.emit('searchResults', {
                'zillowData': zillowXML
              });
            }));
            return res.on('error', (function(err) {
              return console.log(err);
            }));
          });
          return (http.request(options, processZillowData)).end();
        }));
        socket.on('compSearch', (function(data) {
          var options, processZillowData;
          console.log("beginning comp search");
          options = {
            host: 'www.zillow.com',
            path: data.path,
            method: 'GET'
          };
          processZillowData = (function(res) {
            var zillowXML;
            zillowXML = '';
            res.on('data', (function(zillowData) {
              return zillowXML += zillowData;
            }));
            res.on('end', (function() {
              return socket.emit('compResults', {
                'zillowData': zillowXML
              });
            }));
            return res.on('error', (function(err) {
              return console.log(err);
            }));
          });
          return (http.request(options, processZillowData)).end();
        }));
        return socket.on('getDemo', (function(data) {
          var options, processZillowData;
          options = {
            host: 'www.zillow.com',
            path: data.path,
            method: 'GET'
          };
          processZillowData = (function(res) {
            var zillowXML;
            zillowXML = '';
            res.on('data', (function(zillowData) {
              return zillowXML += zillowData;
            }));
            res.on('end', (function() {
              return socket.emit('demoResults', {
                'zillowData': zillowXML
              });
            }));
            return res.on('error', (function(err) {
              return console.log(err);
            }));
          });
          return (http.request(options, processZillowData)).end();
        }));
      }));
    };

    return SocketServer;

  })();

  module.exports = SocketServer;

}).call(this);
